	//Creates a new type of filter function which takes no settings argument
	//this filter's process method takes the data and a string of kanji to include
	//it returns the filtered data.
	function charFilter() {
		this.process = function(data, includeKanji) {

			//Removes any kanji not in the include list (nodes)
			if (includeKanji !== '') {
				var includeReadings = [];
				for (i in includeKanji) {
					var kanji = includeKanji[i];
					includeReadings.push.apply(includeReadings, kToR[kanji]);
				}
				data.nodes = data.nodes.filter(function(obj) {
					return (includeKanji.indexOf(obj.id) !== -1
							||
							includeReadings.indexOf(obj.id) !== -1);
				});
			}

			//builds list of kanji and reading nodes for filtering links at end
			kanjiNodes = data.nodes.filter(function(obj) {
				return obj.type === 'kanji';
			})
			.map(function(obj) { return obj.id; });

			readingNodes = data.nodes.filter(function(obj) {
				return obj.type === 'kun' || obj.type === 'on';
			})
			.map(function(obj) { return obj.id; });

			//removes any links whose source and target nodes are no
			//longer present (must be run at end of function)
			data.links = data.links.filter(function(obj) {
				if (typeof obj.source === 'string') {
					return (kanjiNodes.indexOf(obj.source) !== -1
							&&
							readingNodes.indexOf(obj.target) !== -1);
				}
				else {
					return (kanjiNodes.indexOf(obj.source.id) !== -1
							&&
							readingNodes.indexOf(obj.target.id) !== -1);					
				}
			});
			return data;
		}
	}

	var kanjiFilter = new CharFilter();
